/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
vector<int> left;
    vector<int> right;
    void inorderlefttree(TreeNode* root, vector<int> &left)
    {
        if(root == nullptr){
            left.push_back(-1);
            return;
        }
        left.push_back(root->val);
        inorderlefttree( root->left, left);
        inorderlefttree(root->right, left);
    }

    void inorderrighttree(TreeNode* root, vector<int> &right)
    {
        if(root == nullptr) {
            right.push_back(-1);
            return;
        }
        right.push_back(root->val);
        inorderrighttree(root->right, right);
        inorderrighttree( root->left , right);
    }
    
    bool isSymmetric(TreeNode* root) {
        inorderlefttree(root, left);
        inorderrighttree(root, right);
        int n = left.size()/2;

        for(int i=0;i<left.size();i++) cout<<left[i]<<" ";
        cout<<endl;
        for(int i=0;i<right.size();i++) cout<<right[i]<<" ";


        for(int i =0 ;i<=n;i++)
        {
            if(left[i]==right[i]) continue;
            else return false;
        }
        return true;
    }
};
